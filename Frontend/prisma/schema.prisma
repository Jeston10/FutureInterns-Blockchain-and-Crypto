// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(cuid())
  email      String       @unique
  name       String?
  password   String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  portfolios Portfolio[]
  priceAlerts PriceAlert[]
}

model Portfolio {
  id          String    @id @default(cuid())
  userId      String
  totalValue  Float     @default(10000) // $10k starting balance
  cashBalance Float     @default(10000)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  holdings    Holding[]
  trades      Trade[]
}

model Holding {
  id           String    @id @default(cuid())
  portfolioId  String
  symbol       String    // BTC, ETH, USDT, USDC, XMR, SOL
  amount       Float     @default(0)
  averagePrice Float     @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  portfolio    Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  
  @@unique([portfolioId, symbol])
}

model Trade {
  id          String    @id @default(cuid())
  portfolioId String
  symbol      String    // BTC, ETH, USDT, USDC, XMR, SOL
  type        String    // "buy" or "sell"
  amount      Float
  price       Float
  totalValue  Float     // amount * price
  timestamp   DateTime  @default(now())
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
}

model PriceAlert {
  id        String   @id @default(cuid())
  userId    String
  symbol    String   // BTC, ETH, USDT, USDC, XMR, SOL
  targetPrice Float
  condition String   // "above" or "below"
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
